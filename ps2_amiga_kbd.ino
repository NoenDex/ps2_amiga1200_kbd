#include <PS2KeyAdvanced.h>

PS2KeyAdvanced keyboard;

#define ps_clk 2 
#define ps_data 3

#define amiga_clk 5
#define amiga_data 4

#define DEBUG 1

unsigned char translationTable [256];

uint16_t c;
unsigned char ascan;


void setupTable () {
  for (int i=0;i<256;i++) {
    translationTable[i]=0;  
  }
  translationTable[PS2_KEY_NUM]=0;
  translationTable[PS2_KEY_SCROLL]=0;
  translationTable[PS2_KEY_CAPS]=0;
  translationTable[PS2_KEY_PAUSE]=0x5f;
  translationTable[PS2_KEY_L_SHIFT]=0x60;
  translationTable[PS2_KEY_R_SHIFT]=0x61;
  translationTable[PS2_KEY_L_CTRL]=0x63;
  translationTable[PS2_KEY_R_CTRL]=0x63;
  translationTable[PS2_KEY_L_ALT]=0x64;
  translationTable[PS2_KEY_R_ALT]=0x65;
  translationTable[PS2_KEY_L_GUI]=0x66;  // (Sometimes called windows key)
  translationTable[PS2_KEY_R_GUI]=0x67;  // (Sometimes called windows key)
  translationTable[PS2_KEY_MENU]=0x66;
  translationTable[PS2_KEY_BREAK]=0;  // (Break is CTRL + PAUSE generated inside keyboard)
  translationTable[PS2_KEY_SYSRQ]=0;  // (Generated by some keyboards by ALT and PRTSCR )0x10
  translationTable[PS2_KEY_HOME]=0;
  translationTable[PS2_KEY_END]=0;
  translationTable[PS2_KEY_PGUP]=0;
  translationTable[PS2_KEY_PGDN]=0;
  translationTable[PS2_KEY_L_ARROW]=0x4f;
  translationTable[PS2_KEY_R_ARROW]=0x4e;
  translationTable[PS2_KEY_UP_ARROW]=0x4c;
  translationTable[PS2_KEY_DN_ARROW]=0x4d;
  translationTable[PS2_KEY_INSERT]=0;
  translationTable[PS2_KEY_DELETE]=0x46;
  translationTable[PS2_KEY_ESC]=0x00;
  translationTable[PS2_KEY_BS]=0x41;
  translationTable[PS2_KEY_TAB]=0x42;
  translationTable[PS2_KEY_ENTER]=0x44;
  translationTable[PS2_KEY_SPACE]=0x40;
  translationTable[PS2_KEY_KP0]=0x0f;
  translationTable[PS2_KEY_KP1]=0x1d;
  translationTable[PS2_KEY_KP2]=0x1e;
  translationTable[PS2_KEY_KP3]=0x1f;
  translationTable[PS2_KEY_KP4]=0x2d;
  translationTable[PS2_KEY_KP5]=0x2e;
  translationTable[PS2_KEY_KP6]=0x2f;
  translationTable[PS2_KEY_KP7]=0x3d;
  translationTable[PS2_KEY_KP8]=0x3e;
  translationTable[PS2_KEY_KP9]=0x3f;
  translationTable[PS2_KEY_KP_DOT]=0x3c;
  translationTable[PS2_KEY_KP_ENTER]=0x43;
  translationTable[PS2_KEY_KP_PLUS]=0x5e;
  translationTable[PS2_KEY_KP_MINUS]=0x4a;
  translationTable[PS2_KEY_KP_TIMES]=0x5d;
  translationTable[PS2_KEY_KP_DIV]=0x5c;
  translationTable[PS2_KEY_0]=0x0A;
  translationTable[PS2_KEY_1]=0x01;
  translationTable[PS2_KEY_2]=0x02;
  translationTable[PS2_KEY_3]=0x03;
  translationTable[PS2_KEY_4]=0x04;
  translationTable[PS2_KEY_5]=0x05;
  translationTable[PS2_KEY_6]=0x06;
  translationTable[PS2_KEY_7]=0x07;
  translationTable[PS2_KEY_8]=0x08;
  translationTable[PS2_KEY_9]=0x09;
  translationTable[PS2_KEY_APOS]=0;
  translationTable[PS2_KEY_COMMA]=0x38;
  translationTable[PS2_KEY_MINUS]=0x0b;
  translationTable[PS2_KEY_DOT]=0x39;
  translationTable[PS2_KEY_DIV]=0x3a;
  translationTable[PS2_KEY_KP_EQUAL]=0;  //  (Some Numeric keyboards have an '=' on right keypad)
  translationTable[PS2_KEY_SINGLE]=0;    //  (Single quote or back quote)
  translationTable[PS2_KEY_A]=0x20;
  translationTable[PS2_KEY_B]=0x35;
  translationTable[PS2_KEY_C]=0x33;
  translationTable[PS2_KEY_D]=0x22;
  translationTable[PS2_KEY_E]=0x12;
  translationTable[PS2_KEY_F]=0x23;
  translationTable[PS2_KEY_G]=0x24;
  translationTable[PS2_KEY_H]=0x25;
  translationTable[PS2_KEY_I]=0x17;
  translationTable[PS2_KEY_J]=0x26;
  translationTable[PS2_KEY_K]=0x27;
  translationTable[PS2_KEY_L]=0x28;
  translationTable[PS2_KEY_M]=0x37;
  translationTable[PS2_KEY_N]=0x36;
  translationTable[PS2_KEY_O]=0x18;
  translationTable[PS2_KEY_P]=0x19;
  translationTable[PS2_KEY_Q]=0x10;
  translationTable[PS2_KEY_R]=0x13;
  translationTable[PS2_KEY_S]=0x21;
  translationTable[PS2_KEY_T]=0x14;
  translationTable[PS2_KEY_U]=0x16;
  translationTable[PS2_KEY_V]=0x34;
  translationTable[PS2_KEY_W]=0x11;
  translationTable[PS2_KEY_X]=0x32;
  translationTable[PS2_KEY_Y]=0x15;
  translationTable[PS2_KEY_Z]=0x31;
  translationTable[PS2_KEY_SEMI]=0x29;
  translationTable[PS2_KEY_BACK]=0x41;
  translationTable[PS2_KEY_OPEN_SQ]=0x1a;
  translationTable[PS2_KEY_CLOSE_SQ]=0x1b;
  translationTable[PS2_KEY_EQUAL]=0x0c;
  translationTable[PS2_KEY_KP_COMMA]=0;   // (Some Numeric keypads have a comma key)
  translationTable[PS2_KEY_F1]=0x50;
  translationTable[PS2_KEY_F2]=0x51;
  translationTable[PS2_KEY_F3]=0x52;
  translationTable[PS2_KEY_F4]=0x53;
  translationTable[PS2_KEY_F5]=0x54;
  translationTable[PS2_KEY_F6]=0x55;
  translationTable[PS2_KEY_F7]=0x56;
  translationTable[PS2_KEY_F8]=0x57;
  translationTable[PS2_KEY_F9]=0x58;
  translationTable[PS2_KEY_F10]=0x59;
  translationTable[PS2_KEY_F11]=0;
  translationTable[PS2_KEY_F12]=0;
  translationTable[PS2_KEY_F13]=0;
  translationTable[PS2_KEY_F14]=0;
  translationTable[PS2_KEY_F15]=0;
  translationTable[PS2_KEY_F16]=0;
  translationTable[PS2_KEY_F17]=0;
  translationTable[PS2_KEY_F18]=0;
  translationTable[PS2_KEY_F19]=0;
  translationTable[PS2_KEY_F20]=0;
  translationTable[PS2_KEY_F21]=0;
  translationTable[PS2_KEY_F22]=0;
  translationTable[PS2_KEY_F23]=0;
  translationTable[PS2_KEY_F24]=0;
  translationTable[PS2_KEY_NEXT_TR]=0x6e; // CDTV FF
  translationTable[PS2_KEY_PREV_TR]=0x6f; // CDTV FR
  translationTable[PS2_KEY_STOP]=0x6d; // CDTV stop
  translationTable[PS2_KEY_PLAY]=0x6c; // CDTV play/pause
  translationTable[PS2_KEY_MUTE]=0;
  translationTable[PS2_KEY_VOL_UP]=0;
  translationTable[PS2_KEY_VOL_DN]=0;
  translationTable[PS2_KEY_MEDIA]=0;
  translationTable[PS2_KEY_EMAIL]=0;
  translationTable[PS2_KEY_CALC]=0;
  translationTable[PS2_KEY_COMPUTER]=0;
  translationTable[PS2_KEY_WEB_SEARCH]=0;
  translationTable[PS2_KEY_WEB_HOME]=0;
  translationTable[PS2_KEY_WEB_BACK]=0;
  translationTable[PS2_KEY_WEB_FORWARD]=0;
  translationTable[PS2_KEY_WEB_STOP]=0;
  translationTable[PS2_KEY_WEB_REFRESH]=0;
  translationTable[PS2_KEY_WEB_FAVOR]=0;
  translationTable[PS2_KEY_EUROPE2]=0;
  translationTable[PS2_KEY_POWER]=0;
  translationTable[PS2_KEY_SLEEP]=0;
  translationTable[PS2_KEY_WAKE]=0;
  translationTable[PS2_KEY_INTL1]=0;
  translationTable[PS2_KEY_INTL2]=0;
  translationTable[PS2_KEY_INTL3]=0;
  translationTable[PS2_KEY_INTL4]=0;
  translationTable[PS2_KEY_INTL5]=0;
  translationTable[PS2_KEY_LANG1]=0;
  translationTable[PS2_KEY_LANG2]=0;
  translationTable[PS2_KEY_LANG3]=0;
  translationTable[PS2_KEY_LANG4]=0;
  translationTable[PS2_KEY_LANG5]=0;
}


void setup()  {
#ifdef DEBUG
  Serial.begin(9600) ; 
#endif
  setupTable ();
  keyboard.begin( ps_data, ps_clk );

  pinMode(amiga_clk, OUTPUT) ; 
  pinMode(amiga_data, OUTPUT) ; 
  digitalWrite(amiga_clk, HIGH) ; 
  digitalWrite(amiga_data, HIGH) ; 
}



void _write(unsigned char value)
{ 
    
   int i=0;
   int p  = ((value & 0x80) >> 7) ; 
   int result = (value << 1) | p ; 
   digitalWrite(amiga_data, HIGH);
   digitalWrite(amiga_clk, HIGH);
   int z = 0x80 ; 
   for (i=0; i < 8; i++)
   {
    digitalWrite(amiga_clk, LOW);
    if (!(result & z)) digitalWrite(amiga_data, HIGH);
    else digitalWrite(amiga_data, LOW); 
    delayMicroseconds(20) ;
    digitalWrite(amiga_clk, HIGH);
    delayMicroseconds(20) ;
    z = z >> 1 ;
  }
  digitalWrite(amiga_data, HIGH);
  digitalWrite(amiga_clk, HIGH);
  delayMicroseconds(200) ;
}


void loop() {

  if( keyboard.available())  {
    c = keyboard.read();
   #ifdef DEBUG
    if( ( c & 0xFF ) > 0 ) {
      Serial.println( c , HEX );
    }
   #endif

    if( !( c & PS2_BREAK ) )  {
       ascan = translationTable[c & 0xff];
       if (ascan != 0) {
        Serial.print(" a1: ");
              Serial.println( ascan , HEX );

         pinMode(amiga_clk, OUTPUT) ; 
         pinMode(amiga_data, OUTPUT) ; 
         _write(ascan ) ;
       }
  } 
    
   if( ( c & PS2_BREAK ) )   {// only on breaj codes
  
       ascan = translationTable[c & 0xff];
         if (ascan != 0) {
          Serial.print(" a2: ");
                Serial.println( ascan , HEX );
           pinMode(amiga_clk, OUTPUT) ; 
           pinMode(amiga_data, OUTPUT) ; 
           _write(ascan | 0x80) ;
         }
      }
  
  }
}


